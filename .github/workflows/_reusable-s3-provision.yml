# .github/workflows/_reusable-s3-provision.yml
name: _reusable S3 Provision (IAM Keys)

on:
  workflow_call:
    inputs:
      bucket_name:
        required: true
        type: string
      region:
        required: true
        type: string

permissions:
  contents: read

jobs:
  provision:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ inputs.region }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (IAM keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Verify identity
        run: aws sts get-caller-identity

      - name: Sanity checks (name, prefix, region)
        shell: bash
        run: |
          set -euo pipefail
          B="${{ inputs.bucket_name }}"
          R="${{ inputs.region }}"
          [[ "$B" =~ ^[a-z0-9.-]{3,63}$ ]] || { echo "Invalid bucket name: $B"; exit 1; }
          # (Optional) enforce your prefix â€” comment out if not needed
          [[ "$B" =~ ^guru-poc- ]] || { echo "Bucket must start with 'guru-poc-'"; exit 1; }
          echo "Bucket: $B | Region: $R"

      - name: Create bucket if missing
        shell: bash
        run: |
          set -euo pipefail
          B="${{ inputs.bucket_name }}"
          R="${{ inputs.region }}"
          if aws s3api head-bucket --bucket "$B" 2>/dev/null; then
            echo "Bucket exists."
          else
            if [ "$R" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$B"
            else
              aws s3api create-bucket --bucket "$B" \
                --create-bucket-configuration LocationConstraint="$R"
            fi
            echo "Created $B"
          fi

      - name: Block public access
        run: |
          aws s3api put-public-access-block --bucket "${{ inputs.bucket_name }}" \
            --public-access-block-configuration \
            BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true

      - name: Enable default encryption (SSE-S3)
        run: |
          aws s3api put-bucket-encryption --bucket "${{ inputs.bucket_name }}" \
            --server-side-encryption-configuration '{
              "Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]
            }'

      - name: Enable versioning
        run: |
          aws s3api put-bucket-versioning --bucket "${{ inputs.bucket_name }}" \
            --versioning-configuration Status=Enabled

      - name: Show final configuration
        run: |
          echo "Encryption:"
          aws s3api get-bucket-encryption --bucket "${{ inputs.bucket_name }}" || true
          echo "Versioning:"
          aws s3api get-bucket-versioning --bucket "${{ inputs.bucket_name }}" || true
          echo "Public access block:"
          aws s3api get-public-access-block --bucket "${{ inputs.bucket_name }}" || true
