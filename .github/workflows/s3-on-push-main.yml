name: Apply S3 Requests (push to main)

on:
  push:
    branches: [ "main" ]
    paths:
      - 'infra/requests/s3/*.yml'
      - 'infra/requests/s3/*.yaml'

permissions:
  contents: read

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install yq
        run: |
          sudo apt-get update -y
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Configure AWS credentials (IAM keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Find changed request files in this push
        id: changed
        shell: bash
        run: |
          set -euo pipefail
          before="${{ github.event.before }}"
          after="${{ github.sha }}"
          files=$(git diff --name-only "$before" "$after" -- 'infra/requests/s3/*.yml' 'infra/requests/s3/*.yaml' || true)
          echo "Changed files: $files"
          if [ -z "$files" ]; then
            echo "has_items=false" >> "$GITHUB_OUTPUT"
          else
            printf "%s\n" $files > /tmp/changed.txt
            echo "has_items=true"  >> "$GITHUB_OUTPUT"
          fi

      - name: Provision each requested bucket
        if: steps.changed.outputs.has_items == 'true'
        shell: bash
        run: |
          set -euo pipefail
          while read -r f; do
            [ -z "$f" ] && continue
            echo "---- Processing $f ----"
            BUCKET=$(yq '.bucket_name' "$f")
            REGION=$(yq '.region' "$f")

            # Basic validations
            [[ "$BUCKET" =~ ^[a-z0-9.-]{3,63}$ ]] || { echo "Invalid bucket name: $BUCKET"; exit 1; }
            [[ "$BUCKET" =~ ^guru-poc- ]] || { echo "Bucket must start with 'guru-poc-'"; exit 1; }
            [ -n "$REGION" ] || { echo "Missing region in $f"; exit 1; }

            echo "Bucket: $BUCKET | Region: $REGION"

            # Create if missing
            if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
              echo "Bucket exists."
            else
              if [ "$REGION" = "us-east-1" ]; then
                aws s3api create-bucket --bucket "$BUCKET"
              else
                aws s3api create-bucket --bucket "$BUCKET" \
                  --create-bucket-configuration LocationConstraint="$REGION"
              fi
              echo "Created $BUCKET"
            fi

            # Block public access
            aws s3api put-public-access-block --bucket "$BUCKET" \
              --public-access-block-configuration \
              BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true

            # Default encryption (SSE-S3)
            aws s3api put-bucket-encryption --bucket "$BUCKET" \
              --server-side-encryption-configuration '{
                "Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]
              }'

            # Versioning
            aws s3api put-bucket-versioning --bucket "$BUCKET" \
              --versioning-configuration Status=Enabled

            # Show config
            echo "Encryption:" && aws s3api get-bucket-encryption --bucket "$BUCKET" || true
            echo "Versioning:" && aws s3api get-bucket-versioning --bucket "$BUCKET" || true
            echo "Public access block:" && aws s3api get-public-access-block --bucket "$BUCKET" || true
            echo "---- Done $f ----"
          done < /tmp/changed.txt
